## 1. RELRO (RELocation Read-Only)

**쓰기 권한이 불필요한 데이터 영역에 쓰기 권한을 제거하여 ELF 바이너리 또는 프로세스의 데이터 영역을 보호하는 기법**

- RELRO를 부분적으로 적용하는 **Partial RELRO**
- 가장 넓은 영역에 RELRO를 적용하는 **Full RELRO**

### 1-1. Partial RELRO

`**.init_array` , `.fini_array` 등 여러 섹션에 쓰기 권한을 제거** 

**→** 두 영역을 덮어쓰는 공격을 수행하기 어려워짐. 

→ Lazy binding을 사용하므로 라이브러리 함수들의 GOT 엔트리는 쓰기 권한 존재

→ **GOT overwrite** 공격으로 우회 가능

### 1-2. Full RELRO

`**.init_array` , `.fini_array` 뿐만 아니라 GOT 에도 쓰기 권한 제거**

→ Lazy binding을 사용하지 않으며 라이브러리 함수들의 주소는 바이너리가 로드되는 시점에 바인딩

→ 라이브러리에 위치한 **hook (malloc hook, free hook)** 같은 함수 포인터를 조작하는 공격으로 우회 가능

( `**.init_array` , `.fini_array` :** 프로세스의 시작과 종료에 실행할 함수들의 주소를 저장, ELF의 데이터 세그먼트에 위치 )

`**__malloc_hook**`은 `**libc.so**`에서 쓰기 가능한 영역에 위치

libc가 매핑된 주소를 알 때, 이 변수를 조작하고 `**malloc**`을 호출하여 실행 흐름을 조작할 수 있음.

이와 같은 공격 기법이 **Hook Overwrite**

### 1-1-1. **Lazy Binding**

Dynamic Linking 방식으로 컴파일 된 ELF 바이너리는 공유 라이브러리 내에 위치한 함수의 주소를 동적으로 알아오기 위해 **GOT(Global Offset Table)** 테이블을 이용

**모든 외부 함수의 주소를 한 번에 로딩하지 않고, 함수 호출 시점에 해당 함수의 주소만 공유 라이브러리로부터 알아오는 것**

**Lazy binding**을 하는 바이너리는 실행 중에 GOT 테이블을 업데이트할 수 있어야 하므로,

GOT에 쓰기 권한이 부여됨. ← 바이너리를 취약하게 만드는 원인

### 1-1-2. GOT Overwrite

예) printf 함수의 주소가 저장되어있는 GOT를 Overwrite하여 system 함수로 변조

→ printf 함수가 호출될 때 system 함수가 호출됨.

(**GOT**는 **PLT**가 참조하는 테이블이며, 프로시저들의 실제 주소가 들어있음)

*💡 **.got와 .got.plt*** 

**Partial RELRO**가 적용된 바이너리는 got와 관련된 섹션이 `**.got**`와 `**.got.plt**`로 두 개가 존재

- 실행되는 시점에 **바인딩(now binding)**되는 변수(전역)는 `**.got**`에 위치
    - 바이너리가 실행될 때는 이미 바인딩이 완료되어 있으므로 이 영역에 쓰기 권한을 부여하지 않음.
- 실행 중에 **바인딩(lazy binding)**되는 변수는 `**.got.plt**`에 위치
    - 이 영역은 실행 중에 값이 써져야 하므로 쓰기 권한이 부여됨.

(**Partial RELRO**가 적용된 바이너리에서 대부분 함수들의 GOT 엔트리는 `**.got.plt**`에 저장됨.)

**Full RELRO**가 적용되면 라이브러리 함수들의 주소가 바이너리의 로딩 시점에 모두 바인딩됨. 

따라서 GOT에는 쓰기 권한이 부여되지 않음.

> **바이너리의 RELRO 여부** : checksec 실행파일 (RELRO: Partial RELRO)
> 

---

## 2. ****PIE (Position-Independent Executable)****

**ASLR이 코드 영역에도 적용되게 해주는 기술**

- PIC (Position Independent Code)
- Relative Addressing (상대 참조)
- Partial Overwrite

### 2-1. **PIC**

**어떤 주소에 매핑되어도 실행 가능한 코드**

**절대 주소를 사용하지 않으며 일반적으로 `rip`를 기준으로 데이터를 상대 참조(Relative Addressing) 함.**

- **상대 참조(Relative Addressing)**: 어떤 값을 기준으로 다른 주소를 지정하는 방식

리눅스에서 ELF는 **실행 파일(Executable)**과 **공유 오브젝트(Shared Object, SO)**로 두 가지가 존재

- 실행 파일은 `**addr**`처럼 **일반적인 실행 파**일이 해당
- 공유 오브젝트는 `**libc.so**`와 같은 **라이브러리 파일**이 해당

공유 오브젝트는 기본적으로 **재배치(Relocation)**가 가능하도록 설계

재배치가 가능 == 메모리의 어느 주소에 적재되어도 코드의 의미가 훼손되지 않음.

컴퓨터 과학에서는 이런 성질을 만족하는 코드를 **Position-Independent Code(PIC)**라고 부름.

### 2-2. PIE

**무작위 주소에 매핑돼도 실행 가능한 실행 파일**

PIE의 코드는 모두 PIC이다. 

자체적으로 보호 기법은 아니지만 ASLR이 적용된 환경에서는 시스템을 더욱 안전하게 만드는 효과가 있음. 

최신 gcc는 기본적으로 PIE 컴파일을 함.

**PIE on ASLR**

PIE는 재배치가 가능하므로, ASLR이 적용된 시스템에서는 실행 파일도 무작위 주소에 적재

PIE가 적용되면 `**main**`함수의 주소가 매 실행마다 바뀜.

- 코드 베이스를 구하거나, Partial Overwrite로 우회 가능

### 2-2-1. **PIE 우회**

- **코드 베이스 구하기**

ASLR환경에서 PIE가 적용된 바이너리는 실행될 때 마다 다른 주소에 적재

코드 영역의 가젯을 사용하거나, 데이터 영역에 접근하려면 바이너리가 적재된 주소를 알아야 함.

이 주소를 **PIE 베이스**, 또는 **코드 베이스**라고 함.

코드 베이스를 구하려면 라이브러리의 베이스 주소를 구할 때 처럼 코드 영역의 임의 주소를 읽고, 그 주소에서 오프셋을 빼야한다. 

(**ROP(Return Oriented Programming)**에서 라이브러리의 베이스 주소를 구하는 과정과 비슷)

- **Partial Overwrite**

**반환 주소의 일부 바이트만 덮는 공격 방법**

일반적으로 함수의 반환 주소는 호출 함수(Caller)의 내부를 가리킴. 

특정 함수의 호출 관계를 정적 분석 또는 동적 분석으로 확인 → 반환 주소 예측

ASLR의 특성 상, 코드 영역의 주소도 하위 12비트 값은 항상 같음. 

사용하려는 코드 가젯의 주소가 반환 주소와 하위 한 바이트만 다르다면, 이 값만 덮어서 원하는 코드를 실행시킬 수 있음.

그러나 만약 두 바이트 이상이 다른 주소로 실행 흐름을 옮기고자 한다면, ASLR로 뒤섞이는 주소를 맞춰야 하므로 브루트 포싱이 필요하며, 공격이 확률에 따라 성공하게 됨.
